// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PethouseAPI.Data;

#nullable disable

namespace PethouseAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250323044001_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "23fa8dce-e71a-4b38-b87b-6d3a563117f9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<bool>("CarnetCheked")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsTOSAppointmentDocumentSigned")
                        .HasColumnType("boolean");

                    b.Property<bool>("MedicalChecked")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentType = 0,
                            CarnetCheked = true,
                            EndDate = new DateOnly(2022, 12, 10),
                            IsTOSAppointmentDocumentSigned = true,
                            MedicalChecked = true,
                            StartDate = new DateOnly(2022, 10, 10)
                        });
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.BreedSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PriceLowSeason")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PricePeakSeason")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BreedSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "0-10kg",
                            Name = "Small",
                            PriceLowSeason = 120.00m,
                            PricePeakSeason = 100.00m
                        },
                        new
                        {
                            Id = 2,
                            Label = "11-25kg",
                            Name = "Medium",
                            PriceLowSeason = 170.00m,
                            PricePeakSeason = 150.00m
                        },
                        new
                        {
                            Id = 3,
                            Label = "26-40kg",
                            Name = "Large",
                            PriceLowSeason = 220.00m,
                            PricePeakSeason = 200.00m
                        },
                        new
                        {
                            Id = 4,
                            Label = "41-60kg",
                            Name = "Extra Large",
                            PriceLowSeason = 270.00m,
                            PricePeakSeason = 250.00m
                        });
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.Owner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "82d6dd18-6ef9-44a1-9d42-8062050c8acd",
                            AccessFailedCount = 0,
                            Address = "calle falsa 123",
                            ConcurrencyStamp = "14b79b06-0bec-4129-99bb-5d126ebf48e8",
                            Email = "coco@gmail.com",
                            EmailConfirmed = true,
                            EmergencyContactName = "Dai",
                            EmergencyContactPhone = "9992923923",
                            EmergencyContactRelationship = "Sister",
                            LockoutEnabled = false,
                            Name = "Juan Brito",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPaVTBk9lpYQqLrFL+03K2dW9iYLOyTWqUz05g3/nsv+mers/cQ28tSdIt94ifosOA==",
                            PhoneNumber = "9992923563",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22f8c254-7918-4706-810d-2ed8209d32fa",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "0bee3397-ce64-4984-b580-10e879543d53",
                            AccessFailedCount = 0,
                            Address = "calle falsa 123",
                            ConcurrencyStamp = "5a7a81b1-6663-42f4-9f71-fdd5a265f037",
                            Email = "dai@gmail.com",
                            EmailConfirmed = true,
                            EmergencyContactName = "coco",
                            EmergencyContactPhone = "111111111",
                            EmergencyContactRelationship = "brother",
                            LockoutEnabled = false,
                            Name = "Dai",
                            NormalizedEmail = "DAI@EXAMPLE.COM",
                            NormalizedUserName = "DAI",
                            PasswordHash = "AQAAAAIAAYagAAAAEPaVTBk9lpYQqLrFL+03K2dW9iYLOyTWqUz05g3/nsv+mers/cQ28tSdIt94ifosOA==",
                            PhoneNumber = "99999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "599644fa-d678-4e4c-bc47-3f19e25067db",
                            TwoFactorEnabled = false,
                            UserName = "DAI"
                        });
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.PeakSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PeakSeasons");
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BreedName")
                        .HasColumnType("text");

                    b.Property<int>("BreedSizeId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<bool>("IsMedicated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BreedSizeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreedName = "Chihuahua",
                            BreedSizeId = 1,
                            DateOfBirth = new DateOnly(2022, 10, 10),
                            IsMedicated = false,
                            Name = "Pocha",
                            Notes = "None",
                            OwnerId = "82d6dd18-6ef9-44a1-9d42-8062050c8acd"
                        },
                        new
                        {
                            Id = 2,
                            BreedName = "Border",
                            BreedSizeId = 2,
                            DateOfBirth = new DateOnly(2020, 10, 10),
                            IsMedicated = false,
                            Name = "Luna",
                            Notes = "None",
                            OwnerId = "82d6dd18-6ef9-44a1-9d42-8062050c8acd"
                        },
                        new
                        {
                            Id = 3,
                            BreedName = "Labrador",
                            BreedSizeId = 3,
                            DateOfBirth = new DateOnly(2018, 10, 10),
                            IsMedicated = false,
                            Name = "Coco",
                            Notes = "None",
                            OwnerId = "0bee3397-ce64-4984-b580-10e879543d53"
                        });
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.PetAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("Friday")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("Monday")
                        .HasColumnType("boolean");

                    b.Property<int>("PetId")
                        .HasColumnType("integer");

                    b.Property<bool>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PetId");

                    b.ToTable("PetAppointments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PethouseAPI.Data.Models.Owner", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PethouseAPI.Data.Models.Owner", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PethouseAPI.Data.Models.Owner", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PethouseAPI.Data.Models.Owner", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.Pet", b =>
                {
                    b.HasOne("PethouseAPI.Data.Models.BreedSize", "BreedSize")
                        .WithMany("Pets")
                        .HasForeignKey("BreedSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PethouseAPI.Data.Models.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BreedSize");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.PetAppointment", b =>
                {
                    b.HasOne("PethouseAPI.Data.Models.Appointment", "Appointment")
                        .WithMany("PetsAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PethouseAPI.Data.Models.Pet", "Pet")
                        .WithMany("PetsAppointments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.Appointment", b =>
                {
                    b.Navigation("PetsAppointments");
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.BreedSize", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.Owner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PethouseAPI.Data.Models.Pet", b =>
                {
                    b.Navigation("PetsAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
